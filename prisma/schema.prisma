// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  seed     = "prisma/seed.js"
  output   = "../node_modules/.prisma/client" // Default recommended location
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             Int            @id @default(autoincrement())
  fullName       String
  email          String         @unique
  password       String
  educationLevel String
  specialty      String
  favorites      Favorite[]
  notifications  Notification[]
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
}

model Company {
  id          Int       @id @default(autoincrement())
  companyName String
  email       String    @unique
  password    String
  description String?
  longitude   Float
  latitude    Float
  address     String?
  phoneNumber String?
  website     String?
  posts       Post[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime? @updatedAt
}

model Post {
  id             Int            @id @default(autoincrement())
  title          String
  description    String
  startDate      DateTime
  endDate        DateTime
  longitude      Float
  latitude       Float
  specialty      String
  educationLevel String
  skills         String[] // <-- added array of strings
  company        Company        @relation(fields: [companyId], references: [id])
  companyId      Int
  favorites      Favorite[]
  notifications  Notification[]
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
}

model Favorite {
  id     Int  @id @default(autoincrement())
  user   User @relation(fields: [userId], references: [id])
  userId Int
  post   Post @relation(fields: [postId], references: [id])
  postId Int

  @@unique([userId, postId]) // Ensure no duplicate favorites
}

model Notification {
  id        Int      @id @default(autoincrement())
  user      User?    @relation(fields: [userId], references: [id])
  userId    Int?
  post      Post?    @relation(fields: [postId], references: [id])
  postId    Int?
  message   String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
}
